[project]
name = "FlowerPower"
description = "A simple workflow framework for building and managing data processing pipelines"
authors = [{ name = "Volker L.", email = "ligno.blades@gmail.com" }]
readme = "README.md"
requires-python = ">= 3.11"
version = "0.31.1"
keywords = ["hamilton", "workflow", "pipeline", "scheduler", "dask", "ray"]

dependencies = [
  #'dill>=0.3.8',
  'duration-parser>=1.0.1',
  'fsspec>=2024.10.0',
  'fsspec-utils>=0.1.0',
  'humanize>=4.12.2',
  'msgspec>=0.19.0',
  'munch>=4.0.0',
  #"openai>=1.100.2",
  #'orjson>=3.10.15',
  #'python-dotenv>=1.0.1',
  'pyyaml>=6.0.1',
  'rich>=13.9.3',
  's3fs>=2024.10.0',
  'sf-hamilton-sdk>=0.5.2',
  'sf-hamilton[visualization,rich,tqdm]>=1.69.0',
  'typer>=0.12.3',
]


[project.urls]
"Homepage" = "https://github.com/legout/flowerpower"
"Bug Tracker" = "https://github.com/legout/flowerpower/issues"

[project.scripts]
flowerpower = "flowerpower.cli:app"

[project.optional-dependencies]
io = ["flowerpower-io>=0.1.1"]
io-legacy = ["flowerpower-io[legacy]>=0.1.1"]
opentelemetry = [
  "opentelemetry-api>=1.5.0",
  "opentelemetry-sdk>=1.5.0",
  "opentelemetry-exporter-jaeger>=1.21.0", #"sf-hamilton[opentelemetry]>=1.83.3"
]
ray = ["ray>=2.34.0"]
ui = ["sf-hamilton-ui>=0.0.11"]

openlineage = ["openlineage-python>=1.32.0"]


[tool.uv]
dev-dependencies = [
  "ipython>=8.24.0",
  "isort>=5.13.2",
  "ruff>=0.7.1",
  "jupyterlab>=4.3.0",
  "pytest>=8.3.4",
  "pytest-mock>=3.12.0",
  "pytest-cov>=4.1.0",
  "marimo>=0.10.19",
  "pre-commit>=4.2.0",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.17",
  "quarto>=0.1.0",
  "mkdocs-glightbox>=0.4.0",
  "mkdocs-mermaid2-plugin>=1.2.1",
  "pymdown-extensions>=10.16.1",
  "mkdocstrings>=0.30.0",
  "mkdocstrings-python>=1.17.0",
  "repomix>=0.3.4",
  # Security audit tools
  "bandit[toml]>=1.7.7",
  "safety>=3.2.0",
  "mypy>=1.13.0",
  "pandas>=2.3.2",
  "numpy>=2.3.3",
  "matplotlib>=3.10.6",
  "seaborn>=0.13.2",
]
package = true

# Security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101"]                     # Skip assert_used test for test files

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
  "hamilton.*",
  "sf_hamilton.*",
  "fsspec_utils.*",
  "loguru.*",
  "munch.*",
  "rich.*",
  "typer.*",
]
ignore_missing_imports = true

# Ruff configuration (extended for security)
[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
  "S",  # flake8-bandit (security)
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]    # Allow assert in tests
"examples/*" = ["S101"] # Allow assert in examples
